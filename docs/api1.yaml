swagger: "2.0"
host: petstore.swagger.io
basePath: /v2
info:
  title: Swagger Petstore
  description: This is a sample server Petstore server.
  version: 1.0.0
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    email: apiteam@swagger.io
schemes:
- https
- http
tags:
- name: pet
  description: Everything about your Pets
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: store
  description: Access to Petstore orders
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: header
  b:
    type: basic
    description: A demo basic security definition
  petstore_auth:
    type: oauth2
    flow: implicit
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    scopes:
      read:pets: read your pets
      write:pets: modify pets in your account
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
paths:
  /pet:
    post:
      summary: Add a new pet to the store
      operationId: addPet
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      tags:
      - pet
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      parameters:
      - name: body
        in: body
        required: true
        description: Pet object that needs to be added to the store
        schema:
          $ref: '#/definitions/Pet'
      responses:
        "405":
          description: Invalid input
    put:
      summary: Update an existing pet
      operationId: updatePet
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      tags:
      - pet
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      parameters:
      - name: body
        in: body
        required: true
        description: Pet object that needs to be added to the store
        schema:
          $ref: '#/definitions/Pet'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
  /pet/{petId}:
    delete:
      summary: Deletes a pet
      operationId: deletePet
      produces:
      - application/xml
      - application/json
      tags:
      - pet
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: petId
        in: path
        required: true
        description: Pet id to delete
        type: integer
        format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
    get:
      summary: Find pet by ID
      description: Returns a single pet.
      operationId: getPetById
      produces:
      - application/xml
      - application/json
      tags:
      - pet
      security:
      - api_key: []
      - b: []
      parameters:
      - name: petId
        in: path
        required: true
        description: ID of pet to return
        type: integer
        format: int64
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
    post:
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/xml
      - application/json
      tags:
      - pet
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      parameters:
      - name: petId
        in: path
        required: true
        description: ID of pet that needs to be updated
        type: integer
        format: int64
      - name: name
        in: formData
        required: false
        description: Updated name of the pet
        type: string
      - name: status
        in: formData
        required: false
        description: Updated status of the pet
        type: string
      responses:
        "405":
          description: Invalid input
  /pet/{petId}/uploadImage:
    post:
      summary: Uploads an image
      operationId: uploadFile
      consumes:
      - multipart/form-data
      produces:
      - application/json
      tags:
      - pet
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      parameters:
      - name: petId
        in: path
        required: true
        description: ID of pet to update
        type: integer
        format: int64
      - name: additionalMetadata
        in: formData
        required: false
        description: Additional data to pass to server
        type: string
      - name: file
        in: formData
        required: false
        description: file to upload
        type: file
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
  /pet/findByStatus:
    get:
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings.
      operationId: findPetsByStatus
      produces:
      - application/xml
      - application/json
      tags:
      - pet
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      parameters:
      - name: status
        in: query
        required: true
        description: Status values that need to be considered for filter
        type: array
        collectionFormat: multi
        items:
          type: string
          default: available
          enum:
          - available
          - pending
          - sold
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        "400":
          description: Invalid status value
  /pet/findByTags:
    get:
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings.
      operationId: findPetsByTags
      produces:
      - application/xml
      - application/json
      tags:
      - pet
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      deprecated: true
      parameters:
      - name: tags
        in: query
        required: true
        description: Tags to filter by
        type: array
        collectionFormat: multi
        items:
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        "400":
          description: Invalid tag value
  /store/order:
    post:
      summary: Place an order for a pet
      operationId: placeOrder
      produces:
      - application/xml
      - application/json
      tags:
      - store
      security:
      - b: []
      parameters:
      - name: body
        in: body
        required: true
        description: order placed for purchasing the pet
        schema:
          $ref: '#/definitions/Order'
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        "400":
          description: Invalid Order
  /store/order/{orderId}:
    delete:
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.
      operationId: deleteOrder
      produces:
      - application/xml
      - application/json
      tags:
      - store
      security:
      - b: []
      parameters:
      - name: orderId
        in: path
        required: true
        description: ID of the order that needs to be deleted
        type: integer
        format: int64
        minimum: 1
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    get:
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.
      operationId: getOrderById
      produces:
      - application/xml
      - application/json
      tags:
      - store
      security:
      - b: []
      parameters:
      - name: orderId
        in: path
        required: true
        description: ID of pet that needs to be fetched
        type: integer
        format: int64
        maximum: 10
        minimum: 1
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    post:
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/xml
      - application/json
      tags:
      - user
      parameters:
      - name: body
        in: body
        required: true
        description: Created user object
        schema:
          $ref: '#/definitions/User'
      responses:
        "200":
          description: successful operation
  /user/{username}:
    delete:
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/xml
      - application/json
      tags:
      - user
      parameters:
      - name: username
        in: path
        required: true
        description: The name that needs to be deleted
        type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    get:
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/xml
      - application/json
      tags:
      - user
      parameters:
      - name: username
        in: path
        required: true
        description: The name that needs to be fetched. Use user1 for testing.
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/xml
      - application/json
      tags:
      - user
      parameters:
      - name: username
        in: path
        required: true
        description: name that need to be updated
        type: string
      - name: body
        in: body
        required: true
        description: Updated user object
        schema:
          $ref: '#/definitions/User'
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
  /user/createWithArray:
    post:
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      produces:
      - application/xml
      - application/json
      tags:
      - user
      parameters:
      - name: body
        in: body
        required: true
        description: List of user object
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        "200":
          description: successful operation
  /user/login:
    get:
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/xml
      - application/json
      tags:
      - user
      parameters:
      - name: username
        in: query
        required: true
        description: The user name for login
        type: string
      - name: password
        in: query
        required: true
        description: The password for login in clear text
        type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/xml
      - application/json
      tags:
      - user
      responses:
        "200":
          description: successful operation
definitions:
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
  Category:
    type: object
    xml:
      name: Category
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Order:
    type: object
    xml:
      name: Order
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
        - placed
        - approved
        - delivered
      complete:
        type: boolean
        default: false
  Pet:
    type: object
    required:
    - name
    - photoUrls
    xml:
      name: Pet
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        items:
          type: string
          pattern: ^[123]*$
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: pet status in the store
        enum:
        - available
        - pending
        - sold
  Tag:
    type: object
    xml:
      name: Tag
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  User:
    type: object
    xml:
      name: User
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
