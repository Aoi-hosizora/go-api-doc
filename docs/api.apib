FORMAT: 1A
HOST: localhost:65530/

# goapidoc (1.0)

goapidoc test api

[Terms of service](https://github.com/Aoi-hosizora)

[License: MIT](https://github.com/Aoi-hosizora)

[Aoi-hosizora - Website](https://github.com/Aoi-hosizora)

[Send email to Aoi-hosizora](mailto:a970335605@hotmail.com)

# Group Authorization

> auth-controller

## Register [/auth/register]

### Register [POST]

`POST /auth/register`

> Register.

+ Request (application/json)

    + Attributes (RegisterParam)

    + Body

+ Response 200 (application/json)

    > 200 OK

    + Attributes (Result)

    + Body

## Login [/auth/login]

### Login [POST]

`POST /auth/login`

> Login.

+ Request (application/json)

    + Attributes (LoginParam)

    + Body

+ Response 200 (application/json)

    > 200 OK

    + Attributes (_Result<LoginDto>)

    + Body

+ Response 400 (application/json)

    > 400 Bad Request

    + Attributes (Result)

    + Body

            {
              "code": 400,
              "message": "Unauthorized"
            }

## Logout [/auth/logout]

### Logout [DELETE]

`DELETE /auth/logout`

+ Request (application/json)

    + Headers

            Authorization: (string, optional) - Jwt, apiKey

    + Body

+ Response 200 (application/json)

    > 200 OK

    + Attributes (Result)

    + Body

# Group User

> user-controller

## Get users [/user{?page,limit}]

### Get users [GET]

`GET /user`

+ Parameters

    + page: `1` (number, optional) - current page
        (format: int32, val >= 1.000)
        + Default: `1`
    + limit: `20` (number, optional) - page size
        (format: int32, val >= 15.000)
        + Default: `20`

+ Request (application/json)

    + Headers

            Authorization: (string, optional) - Jwt, apiKey

    + Body

+ Response 200 (application/json)

    > 200 OK

    + Attributes (_Result<_Page<UserDto>>)

    + Body

## Get a user [/user/{username}]

### Get a user [GET]

`GET /user/{username}`

+ Parameters

    + username (string, required) - username

+ Request (application/json)

    + Headers

            Authorization: (string, optional) - Jwt, apiKey

    + Body

+ Response 200 (application/json)

    > 200 OK

    + Attributes (_Result<UserDto>)

    + Body

## Update user [/user/deprecated]

### Update user [PUT]

`PUT /user/deprecated`

Attention: This api is deprecated.

+ Request (application/json)

    + Headers

            Authorization: (string, optional) - Jwt, apiKey

    + Attributes (UpdateUserParam)

    + Body

+ Response 200 (application/json)

    > 200 OK

    + Attributes (Result)

    + Body

## Update user, Delete user [/user]

### Update user [PUT]

`PUT /user`

+ Request (application/json)

    + Headers

            Authorization: (string, optional) - Jwt, apiKey

    + Attributes (UpdateUserParam)

    + Body

+ Response 200 (application/json)

    > 200 OK

    + Attributes (Result)

    + Body

### Delete user [DELETE]

`DELETE /user`

+ Request (application/json)

    + Headers

            Authorization: (string, optional) - Jwt, apiKey

    + Body

+ Response 200 (application/json)

    > 200 OK

    + Attributes (Result)

    + Body

# Group Test

> test-controller

## Test a [/test/a{?q1,q2,q3}]

### Test a [HEAD]

`HEAD /test/a`

+ Parameters

    + q1 (enum[string], required) - q1
        (format: date-time)
        + Members
            + `0`
            + `1`
            + `2`
    + q2 (number, optional) - q2
        (format: double, val >= -5.000)
    + q3: `example` (string, required) - q3
        (format: password, allow empty value)
        + Default: `default`

+ Request (application/json)

    + Headers

            Authorization: (string, optional) - authorization

    + Attributes (object)

        + f1 (file, required) - f1
        + f2 (string, required) - f2
            (allow empty value)

    + Body

+ Response 200 (application/json)

    > 200 Success

    + Attributes (Result)

    + Headers

            Content-Type: (string, required) - content type
            X-My-Token: (string, required) - my token
            X-My-Number: (number, required) - my number

    + Body

+ Response 409 (application/json)

    > 409 Conflict

    + Attributes (string)

    + Body

# Data Structures

## Result (object)

+ code: `200` (number, required) - status code
    (format: int32)
+ message: `success` (string, required) - status message

## UserDto (object)

+ uid (number, required) - user id
    (format: int64)
+ username (string, required) - username
+ nickname (string, required) - nickname
+ profile (string, required) - user profile
    (allow empty value)
+ gender (enum[string], required) - user gender
    + Members
        + `secret`
        + `male`
        + `female`

## LoginDto (object)

+ user (UserDto, required) - authorized user
+ token (string, required) - access token

## RegisterParam (object)

+ username (string, required) - username
    (5 <= len <= 30)
+ password (string, required) - password
    (5 <= len <= 30)

## LoginParam (object)

+ parameter (string, required) - login parameter
+ password (string, required) - password

## UpdateUserParam (object)

+ username (string, required) - username
+ nickname (string, required) - nickname
+ profile (string, required) - user profile
    (allow empty value)
+ gender (enum[string], required) - user gender
    + Members
        + `secret`
        + `male`
        + `female`

## _Result<LoginDto> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (LoginDto, required) - response data

## _Page<UserDto> (object)

+ page (number, required) - current page
    (format: int32)
+ limit (number, required) - page size
    (format: int32)
+ total (number, required) - total count
    (format: int32)
+ data (array[UserDto], required) - response data

## _Result<_Page<UserDto>> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (_Page<UserDto>, required) - response data

## _Result<UserDto> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (UserDto, required) - response data
